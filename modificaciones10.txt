create or replace
PROCEDURE  PRO_ADD_SOLICITUD (
 id_usuario   SOLICITUD.USUARIO_IDUSUARIO%TYPE
 ) IS
BEGIN
   INSERT INTO SOLICITUD(USUARIO_IDUSUARIO, IDSOLICITUD, FECHASOLICITUD) 	
   VALUES(id_usuario, SEQ_SOLICITUD.NEXTVAL, sysdate);
END;

create or replace
PROCEDURE  PRO_ADD_DETALLESOLICITUD (
 id_ejemplar DETALLESOLICITUD.EJEMPLAR_IDEJEMPLAR%TYPE,
 id_solicitud DETALLESOLICITUD.SOLICITUD_IDSOLICITUD%TYPE
 ) IS
BEGIN
   INSERT INTO DETALLESOLICITUD(EJEMPLAR_IDEJEMPLAR, SOLICITUD_IDSOLICITUD) 	
   VALUES(id_ejemplar, id_solicitud);
END;

create or replace
function fn_ultima_solicitud RETURN NUMBER
IS
idsol NUMBER := -1;
BEGIN
idsol := seq_solicitud.currval;
RETURN idsol;
END fn_ultima_solicitud;

create or replace view v_solicitudes as
select usuario_idusuario as IDUSUARIO, idsolicitud, to_char(FECHASOLICITUD, 'mm/dd/yyyy') as FECHA, to_char(FECHASOLICITUD, 'hh24:mi:ss') as HORA from solicitud;

create or replace
PROCEDURE  PRO_ADD_USUARIO (
 rut_usuario   USUARIO.RUTUSUARIO%TYPE,
 nombres_usuario USUARIO.NOMBRESUSUARIO%TYPE,
 apellidos_usuario USUARIO.APELLIDOSUSUARIO%TYPE,
 direccion_usuario USUARIO.DIRECCIONUSUARIO%TYPE,
 telefono_usuario USUARIO.TELEFONOUSUARIO%TYPE,
 foto_usuario USUARIO.FOTOUSUARIO%TYPE,
 huella_usuario USUARIO.HUELLAUSUARIO%TYPE,
 username_sesion SESION.USERNAMESESION%TYPE,
 password_sesion sesion.passwordsesion%TYPE
 ) IS
BEGIN
   INSERT INTO USUARIO(IDUSUARIO, RUTUSUARIO, NOMBRESUSUARIO, APELLIDOSUSUARIO, DIRECCIONUSUARIO, TELEFONOUSUARIO, ACTIVOUSUARIO, FOTOUSUARIO, HUELLAUSUARIO) 	
   VALUES(SEQ_USUARIO.NEXTVAL, rut_usuario, nombres_usuario, apellidos_usuario, direccion_usuario, telefono_usuario, 'n', foto_usuario, huella_usuario);
   INSERT INTO SESION(IDSESION, USERNAMESESION, PASSWORDSESION, TIPOSESION, USUARIO_IDUSUARIO) 	
   VALUES(SEQ_SESION.NEXTVAL, username_sesion, password_sesion,'usuarioNuevo',SEQ_USUARIO.CURRVAL);
END;

create or replace
PROCEDURE  PRO_ADD_USUARIO (
 rut_usuario   USUARIO.RUTUSUARIO%TYPE,
 nombres_usuario USUARIO.NOMBRESUSUARIO%TYPE,
 apellidos_usuario USUARIO.APELLIDOSUSUARIO%TYPE,
 direccion_usuario USUARIO.DIRECCIONUSUARIO%TYPE,
 telefono_usuario USUARIO.TELEFONOUSUARIO%TYPE,
 foto_usuario USUARIO.FOTOUSUARIO%TYPE,
 huella_usuario USUARIO.HUELLAUSUARIO%TYPE,
 username_sesion SESION.USERNAMESESION%TYPE,
 password_sesion sesion.passwordsesion%TYPE,
 email_usuario USUARIO.EMAILUSUARIO%TYPE
 ) IS
BEGIN
   INSERT INTO USUARIO(IDUSUARIO, RUTUSUARIO, NOMBRESUSUARIO, APELLIDOSUSUARIO, DIRECCIONUSUARIO, TELEFONOUSUARIO, ACTIVOUSUARIO, FOTOUSUARIO, HUELLAUSUARIO, EMAILUSUARIO) 	
   VALUES(SEQ_USUARIO.NEXTVAL, rut_usuario, nombres_usuario, apellidos_usuario, direccion_usuario, telefono_usuario, 'n', foto_usuario, huella_usuario, email_usuario);
   INSERT INTO SESION(IDSESION, USERNAMESESION, PASSWORDSESION, TIPOSESION, USUARIO_IDUSUARIO) 	
   VALUES(SEQ_SESION.NEXTVAL, username_sesion, password_sesion,'usuarioNuevo',SEQ_USUARIO.CURRVAL);
END;

ALTER TABLE SESION ADD CONSTRAINT Sesion_Usuario_FK FOREIGN KEY ( Usuario_idUsuario ) REFERENCES Usuario ( idUsuario ) ;

ALTER TABLE SOLICITUD
ADD ESTADOSOLICITUD VARCHAR2 (50);

update solicitud set estadosolicitud = 'pendiente';

create or replace
PROCEDURE  PRO_ADD_SOLICITUD (
 id_usuario IN SOLICITUD.USUARIO_IDUSUARIO%TYPE
 ) IS
BEGIN
   INSERT INTO SOLICITUD(USUARIO_IDUSUARIO, IDSOLICITUD, FECHASOLICITUD, ESTADOSOLICITUD) 	
   VALUES(id_usuario, SEQ_SOLICITUD.NEXTVAL, sysdate, 'pendiente');
END PRO_ADD_SOLICITUD;

create or replace view v_solicitudes_pendientes as
select sol.IDSOLICITUD, us.IDUSUARIO, us.nombresusuario || ' ' || us.apellidosusuario as NOMBREUSUARIO, TO_CHAR(sol.FECHASOLICITUD, 'mm/dd/yyyy') AS FECHA,
    TO_CHAR(sol.FECHASOLICITUD, 'hh24:mi:ss') AS HORA from SOLICITUD sol JOIN USUARIO us on sol.USUARIO_IDUSUARIO = us.IDUSUARIO where ESTADOSOLICITUD = 'pendiente';

create or replace view v_solicitudes as
select sol.IDSOLICITUD, us.IDUSUARIO, us.nombresusuario || ' ' || us.apellidosusuario as NOMBREUSUARIO, TO_CHAR(sol.FECHASOLICITUD, 'mm/dd/yyyy') AS FECHA,
    TO_CHAR(sol.FECHASOLICITUD, 'hh24:mi:ss') AS HORA, sol.estadosolicitud from SOLICITUD sol JOIN USUARIO us on sol.USUARIO_IDUSUARIO = us.IDUSUARIO;

create or replace view v_detalle_ejemplar_titulo as
 select det.solicitud_idsolicitud, det.ejemplar_idejemplar, 
 (select doc.titulodocumento from documento doc join ejemplar ej on doc.iddocumento = ej.documento_iddocumento where 
ej.idejemplar = det.ejemplar_idejemplar)
 as titulo
 from detallesolicitud det join ejemplar ej on det.ejemplar_idejemplar = ej.idejemplar;

CREATE OR REPLACE PROCEDURE  PRO_ADD_PRESTAMO (
 id_ejemplar PRESTAMO.EJEMPLAR_IDEJEMPLAR%TYPE,
 tipo_prestamo PRESTAMO.TIPOPRESTAMO%TYPE,
 fecha_devolucion PRESTAMO.FECHADEVOLUCIONPRESTAMO%TYPE
 ) IS
BEGIN
   INSERT INTO PRESTAMO(EJEMPLAR_IDEJEMPLAR, IDPRESTAMO, TIPOPRESTAMO, FECHAPRESTAMO, FECHADEVOLUCIONPRESTAMO) 	
   VALUES(id_ejemplar, seq_prestamo.nextval, tipo_prestamo, sysdate, fecha_devolucion);
END;

ALTER TABLE PRESTAMO
ADD USUARIO_IDUSUARIO INTEGER;

ALTER TABLE PRESTAMO ADD CONSTRAINT Prestamo_Usuario_FK FOREIGN KEY ( Usuario_idUsuario ) REFERENCES Usuario ( idUsuario ) ;

CREATE OR REPLACE PROCEDURE PRO_DEVOLVER_EJEMPLAR (
 id_ejemplar ejemplar.idejemplar%TYPE
 ) IS
BEGIN
    update prestamo set fechadevolucionrealprestamo = sysdate where ejemplar_idejemplar = id_ejemplar and fechadevolucionrealprestamo = null;
    update ejemplar set disponibilidad = 'disponible' where idejemplar = id_ejemplar;
END PRO_DEVOLVER_EJEMPLAR;

create or replace
PROCEDURE  PRO_ADD_PRESTAMO (
 id_ejemplar PRESTAMO.EJEMPLAR_IDEJEMPLAR%TYPE,
 tipo_prestamo PRESTAMO.TIPOPRESTAMO%TYPE,
 fecha_devolucion PRESTAMO.FECHADEVOLUCIONPRESTAMO%TYPE
 ) IS
BEGIN
   INSERT INTO PRESTAMO(EJEMPLAR_IDEJEMPLAR, IDPRESTAMO, TIPOPRESTAMO, FECHAPRESTAMO, FECHADEVOLUCIONPRESTAMO) 	
   VALUES(id_ejemplar, seq_prestamo.nextval, tipo_prestamo, sysdate, fecha_devolucion);
   update ejemplar set disponibilidad = 'prestado_'||tipo_prestamo where idejemplar = id_ejemplar;
END;

create or replace
PROCEDURE  PRO_ADD_PRESTAMO (
 id_ejemplar PRESTAMO.EJEMPLAR_IDEJEMPLAR%TYPE,
 tipo_prestamo PRESTAMO.TIPOPRESTAMO%TYPE,
 fecha_devolucion PRESTAMO.FECHADEVOLUCIONPRESTAMO%TYPE,
 id_solicitud SOLICITUD.IDSOLICITUD%TYPE,
 id_usuario PRESTAMO.USUARIO_IDUSUARIO%TYPE
 ) IS
BEGIN
   INSERT INTO PRESTAMO(EJEMPLAR_IDEJEMPLAR, IDPRESTAMO, TIPOPRESTAMO, FECHAPRESTAMO, FECHADEVOLUCIONPRESTAMO, USUARIO_IDUSUARIO) 	
   VALUES(id_ejemplar, seq_prestamo.nextval, tipo_prestamo, sysdate, fecha_devolucion, id_usuario);
   update ejemplar set disponibilidad = 'prestado_'||tipo_prestamo where idejemplar = id_ejemplar;
   update solicitud set estadosolicitud = 'prestamos generados' where idsolicitud = id_solicitud;
END;

create or replace
PROCEDURE  PRO_ADD_DETALLESOLICITUD (
 id_ejemplar DETALLESOLICITUD.EJEMPLAR_IDEJEMPLAR%TYPE,
 id_solicitud DETALLESOLICITUD.SOLICITUD_IDSOLICITUD%TYPE
 ) IS
BEGIN
   INSERT INTO DETALLESOLICITUD(EJEMPLAR_IDEJEMPLAR, SOLICITUD_IDSOLICITUD) 	
   VALUES(id_ejemplar, id_solicitud);
   update ejemplar set disponibilidad = 'reservado' where idejemplar = id_ejemplar;
END;

create or replace view v_prestamos_vencidos as
select * from prestamo where sysdate > fechadevolucionprestamo and fechadevolucionrealprestamo is null;

create or replace view v_prestamos_vencidos_sala as
select * from prestamo where sysdate > fechadevolucionprestamo and tipoprestamo = 'sala' and fechadevolucionrealprestamo is null;

create or replace
PROCEDURE PRO_DEVOLVER_EJEMPLAR (
 id_ejemplar ejemplar.idejemplar%TYPE
 ) IS
BEGIN
    update prestamo set fechadevolucionrealprestamo = sysdate where ejemplar_idejemplar = id_ejemplar and fechadevolucionrealprestamo is null;
    update ejemplar set disponibilidad = 'disponible' where idejemplar = id_ejemplar;
END PRO_DEVOLVER_EJEMPLAR;

create or replace
PROCEDURE  PRO_RECHAZAR_PRESTAMO (
 id_ejemplar PRESTAMO.EJEMPLAR_IDEJEMPLAR%TYPE,
 id_solicitud SOLICITUD.IDSOLICITUD%TYPE
 ) IS
BEGIN
   update ejemplar set disponibilidad = 'disponible' where idejemplar = id_ejemplar;
   update solicitud set estadosolicitud = 'rechazada' where idsolicitud = id_solicitud;
END;

commit;