//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BibliotecaWeb.BibliotecaSvc {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BibliotecaSvc.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logear", ReplyAction="http://tempuri.org/IService1/LogearResponse")]
        bool Logear(string nomUser, string clave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logear", ReplyAction="http://tempuri.org/IService1/LogearResponse")]
        System.Threading.Tasks.Task<bool> LogearAsync(string nomUser, string clave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoSesion", ReplyAction="http://tempuri.org/IService1/TipoSesionResponse")]
        string TipoSesion(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TipoSesion", ReplyAction="http://tempuri.org/IService1/TipoSesionResponse")]
        System.Threading.Tasks.Task<string> TipoSesionAsync(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IdUsuarioSesion", ReplyAction="http://tempuri.org/IService1/IdUsuarioSesionResponse")]
        int IdUsuarioSesion(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IdUsuarioSesion", ReplyAction="http://tempuri.org/IService1/IdUsuarioSesionResponse")]
        System.Threading.Tasks.Task<int> IdUsuarioSesionAsync(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserNameExiste", ReplyAction="http://tempuri.org/IService1/UserNameExisteResponse")]
        bool UserNameExiste(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserNameExiste", ReplyAction="http://tempuri.org/IService1/UserNameExisteResponse")]
        System.Threading.Tasks.Task<bool> UserNameExisteAsync(string nomUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarEjemplar", ReplyAction="http://tempuri.org/IService1/AgregarEjemplarResponse")]
        bool AgregarEjemplar(int iddocumento, string estado, string ubicacion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarEjemplar", ReplyAction="http://tempuri.org/IService1/AgregarEjemplarResponse")]
        System.Threading.Tasks.Task<bool> AgregarEjemplarAsync(int iddocumento, string estado, string ubicacion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarDocumento", ReplyAction="http://tempuri.org/IService1/AgregarDocumentoResponse")]
        bool AgregarDocumento(string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarDocumento", ReplyAction="http://tempuri.org/IService1/AgregarDocumentoResponse")]
        System.Threading.Tasks.Task<bool> AgregarDocumentoAsync(string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InfoDocumento", ReplyAction="http://tempuri.org/IService1/InfoDocumentoResponse")]
        string InfoDocumento(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InfoDocumento", ReplyAction="http://tempuri.org/IService1/InfoDocumentoResponse")]
        System.Threading.Tasks.Task<string> InfoDocumentoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarUsuario", ReplyAction="http://tempuri.org/IService1/AgregarUsuarioResponse")]
        bool AgregarUsuario(string rut, string nombres, string apellidos, string telefono, string direccion, bool foto, bool huella, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarUsuario", ReplyAction="http://tempuri.org/IService1/AgregarUsuarioResponse")]
        System.Threading.Tasks.Task<bool> AgregarUsuarioAsync(string rut, string nombres, string apellidos, string telefono, string direccion, bool foto, bool huella, string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSolicitud", ReplyAction="http://tempuri.org/IService1/AgregarSolicitudResponse")]
        int AgregarSolicitud(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSolicitud", ReplyAction="http://tempuri.org/IService1/AgregarSolicitudResponse")]
        System.Threading.Tasks.Task<int> AgregarSolicitudAsync(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSolicitudFecha", ReplyAction="http://tempuri.org/IService1/AgregarSolicitudFechaResponse")]
        int AgregarSolicitudFecha(int idUsuario, System.DateTime fecha);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSolicitudFecha", ReplyAction="http://tempuri.org/IService1/AgregarSolicitudFechaResponse")]
        System.Threading.Tasks.Task<int> AgregarSolicitudFechaAsync(int idUsuario, System.DateTime fecha);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarDetalleSolicitud", ReplyAction="http://tempuri.org/IService1/AgregarDetalleSolicitudResponse")]
        bool AgregarDetalleSolicitud(int idEjemplar, int idSolicitud);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarDetalleSolicitud", ReplyAction="http://tempuri.org/IService1/AgregarDetalleSolicitudResponse")]
        System.Threading.Tasks.Task<bool> AgregarDetalleSolicitudAsync(int idEjemplar, int idSolicitud);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarPrestamo", ReplyAction="http://tempuri.org/IService1/AgregarPrestamoResponse")]
        bool AgregarPrestamo(int idEjemplar, string tipoPrestamo, System.DateTime fechaDevolucion, int idSoli, int idUsu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarPrestamo", ReplyAction="http://tempuri.org/IService1/AgregarPrestamoResponse")]
        System.Threading.Tasks.Task<bool> AgregarPrestamoAsync(int idEjemplar, string tipoPrestamo, System.DateTime fechaDevolucion, int idSoli, int idUsu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DevolucionPrestamo", ReplyAction="http://tempuri.org/IService1/DevolucionPrestamoResponse")]
        bool DevolucionPrestamo(int idEjemplar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DevolucionPrestamo", ReplyAction="http://tempuri.org/IService1/DevolucionPrestamoResponse")]
        System.Threading.Tasks.Task<bool> DevolucionPrestamoAsync(int idEjemplar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Doc_EjemplarDisponible", ReplyAction="http://tempuri.org/IService1/Doc_EjemplarDisponibleResponse")]
        int Doc_EjemplarDisponible(int iddoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Doc_EjemplarDisponible", ReplyAction="http://tempuri.org/IService1/Doc_EjemplarDisponibleResponse")]
        System.Threading.Tasks.Task<int> Doc_EjemplarDisponibleAsync(int iddoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarEjemplar", ReplyAction="http://tempuri.org/IService1/ModificarEjemplarResponse")]
        bool ModificarEjemplar(int idejemplar, int iddocumento, string estado, string ubicacion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarEjemplar", ReplyAction="http://tempuri.org/IService1/ModificarEjemplarResponse")]
        System.Threading.Tasks.Task<bool> ModificarEjemplarAsync(int idejemplar, int iddocumento, string estado, string ubicacion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarEjemplarDisponibilidad", ReplyAction="http://tempuri.org/IService1/ModificarEjemplarDisponibilidadResponse")]
        bool ModificarEjemplarDisponibilidad(int idejemplar, string disponibilidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarEjemplarDisponibilidad", ReplyAction="http://tempuri.org/IService1/ModificarEjemplarDisponibilidadResponse")]
        System.Threading.Tasks.Task<bool> ModificarEjemplarDisponibilidadAsync(int idejemplar, string disponibilidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarDocumento", ReplyAction="http://tempuri.org/IService1/ModificarDocumentoResponse")]
        bool ModificarDocumento(int iddocumento, string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarDocumento", ReplyAction="http://tempuri.org/IService1/ModificarDocumentoResponse")]
        System.Threading.Tasks.Task<bool> ModificarDocumentoAsync(int iddocumento, string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarUsuario", ReplyAction="http://tempuri.org/IService1/ModificarUsuarioResponse")]
        bool ModificarUsuario(int id, string rut, string nombres, string apellidos, string telefono, string direccion, bool activo, bool foto, bool huella);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ModificarUsuario", ReplyAction="http://tempuri.org/IService1/ModificarUsuarioResponse")]
        System.Threading.Tasks.Task<bool> ModificarUsuarioAsync(int id, string rut, string nombres, string apellidos, string telefono, string direccion, bool activo, bool foto, bool huella);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarEjemplar", ReplyAction="http://tempuri.org/IService1/EliminarEjemplarResponse")]
        bool EliminarEjemplar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarEjemplar", ReplyAction="http://tempuri.org/IService1/EliminarEjemplarResponse")]
        System.Threading.Tasks.Task<bool> EliminarEjemplarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarDocumento", ReplyAction="http://tempuri.org/IService1/EliminarDocumentoResponse")]
        bool EliminarDocumento(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarDocumento", ReplyAction="http://tempuri.org/IService1/EliminarDocumentoResponse")]
        System.Threading.Tasks.Task<bool> EliminarDocumentoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarUsuario", ReplyAction="http://tempuri.org/IService1/EliminarUsuarioResponse")]
        bool EliminarUsuario(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EliminarUsuario", ReplyAction="http://tempuri.org/IService1/EliminarUsuarioResponse")]
        System.Threading.Tasks.Task<bool> EliminarUsuarioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RechazarSolicitud", ReplyAction="http://tempuri.org/IService1/RechazarSolicitudResponse")]
        bool RechazarSolicitud(int idSol, int idEj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RechazarSolicitud", ReplyAction="http://tempuri.org/IService1/RechazarSolicitudResponse")]
        System.Threading.Tasks.Task<bool> RechazarSolicitudAsync(int idSol, int idEj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailUsuario", ReplyAction="http://tempuri.org/IService1/GetEmailUsuarioResponse")]
        string GetEmailUsuario(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailUsuario", ReplyAction="http://tempuri.org/IService1/GetEmailUsuarioResponse")]
        System.Threading.Tasks.Task<string> GetEmailUsuarioAsync(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRutUsuario", ReplyAction="http://tempuri.org/IService1/GetRutUsuarioResponse")]
        string GetRutUsuario(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRutUsuario", ReplyAction="http://tempuri.org/IService1/GetRutUsuarioResponse")]
        System.Threading.Tasks.Task<string> GetRutUsuarioAsync(int idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteRutUsuario", ReplyAction="http://tempuri.org/IService1/ExisteRutUsuarioResponse")]
        bool ExisteRutUsuario(string rut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteRutUsuario", ReplyAction="http://tempuri.org/IService1/ExisteRutUsuarioResponse")]
        System.Threading.Tasks.Task<bool> ExisteRutUsuarioAsync(string rut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteEmailUsuario", ReplyAction="http://tempuri.org/IService1/ExisteEmailUsuarioResponse")]
        bool ExisteEmailUsuario(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteEmailUsuario", ReplyAction="http://tempuri.org/IService1/ExisteEmailUsuarioResponse")]
        System.Threading.Tasks.Task<bool> ExisteEmailUsuarioAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivarUsuario", ReplyAction="http://tempuri.org/IService1/ActivarUsuarioResponse")]
        bool ActivarUsuario(int id, string rut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivarUsuario", ReplyAction="http://tempuri.org/IService1/ActivarUsuarioResponse")]
        System.Threading.Tasks.Task<bool> ActivarUsuarioAsync(int id, string rut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EsActivoUsuario", ReplyAction="http://tempuri.org/IService1/EsActivoUsuarioResponse")]
        bool EsActivoUsuario(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EsActivoUsuario", ReplyAction="http://tempuri.org/IService1/EsActivoUsuarioResponse")]
        System.Threading.Tasks.Task<bool> EsActivoUsuarioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSancion", ReplyAction="http://tempuri.org/IService1/AgregarSancionResponse")]
        bool AgregarSancion(int idUs, System.DateTime fechaTermino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AgregarSancion", ReplyAction="http://tempuri.org/IService1/AgregarSancionResponse")]
        System.Threading.Tasks.Task<bool> AgregarSancionAsync(int idUs, System.DateTime fechaTermino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteSancion", ReplyAction="http://tempuri.org/IService1/ExisteSancionResponse")]
        bool ExisteSancion(int idUs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExisteSancion", ReplyAction="http://tempuri.org/IService1/ExisteSancionResponse")]
        System.Threading.Tasks.Task<bool> ExisteSancionAsync(int idUs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DiasAtraso", ReplyAction="http://tempuri.org/IService1/DiasAtrasoResponse")]
        int DiasAtraso(int idEj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DiasAtraso", ReplyAction="http://tempuri.org/IService1/DiasAtrasoResponse")]
        System.Threading.Tasks.Task<int> DiasAtrasoAsync(int idEj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : BibliotecaWeb.BibliotecaSvc.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<BibliotecaWeb.BibliotecaSvc.IService1>, BibliotecaWeb.BibliotecaSvc.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Logear(string nomUser, string clave) {
            return base.Channel.Logear(nomUser, clave);
        }
        
        public System.Threading.Tasks.Task<bool> LogearAsync(string nomUser, string clave) {
            return base.Channel.LogearAsync(nomUser, clave);
        }
        
        public string TipoSesion(string nomUser) {
            return base.Channel.TipoSesion(nomUser);
        }
        
        public System.Threading.Tasks.Task<string> TipoSesionAsync(string nomUser) {
            return base.Channel.TipoSesionAsync(nomUser);
        }
        
        public int IdUsuarioSesion(string nomUser) {
            return base.Channel.IdUsuarioSesion(nomUser);
        }
        
        public System.Threading.Tasks.Task<int> IdUsuarioSesionAsync(string nomUser) {
            return base.Channel.IdUsuarioSesionAsync(nomUser);
        }
        
        public bool UserNameExiste(string nomUser) {
            return base.Channel.UserNameExiste(nomUser);
        }
        
        public System.Threading.Tasks.Task<bool> UserNameExisteAsync(string nomUser) {
            return base.Channel.UserNameExisteAsync(nomUser);
        }
        
        public bool AgregarEjemplar(int iddocumento, string estado, string ubicacion) {
            return base.Channel.AgregarEjemplar(iddocumento, estado, ubicacion);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarEjemplarAsync(int iddocumento, string estado, string ubicacion) {
            return base.Channel.AgregarEjemplarAsync(iddocumento, estado, ubicacion);
        }
        
        public bool AgregarDocumento(string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial) {
            return base.Channel.AgregarDocumento(titulo, autor, anio, tipo, categoria, edicion, editorial);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarDocumentoAsync(string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial) {
            return base.Channel.AgregarDocumentoAsync(titulo, autor, anio, tipo, categoria, edicion, editorial);
        }
        
        public string InfoDocumento(int id) {
            return base.Channel.InfoDocumento(id);
        }
        
        public System.Threading.Tasks.Task<string> InfoDocumentoAsync(int id) {
            return base.Channel.InfoDocumentoAsync(id);
        }
        
        public bool AgregarUsuario(string rut, string nombres, string apellidos, string telefono, string direccion, bool foto, bool huella, string username, string password, string email) {
            return base.Channel.AgregarUsuario(rut, nombres, apellidos, telefono, direccion, foto, huella, username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarUsuarioAsync(string rut, string nombres, string apellidos, string telefono, string direccion, bool foto, bool huella, string username, string password, string email) {
            return base.Channel.AgregarUsuarioAsync(rut, nombres, apellidos, telefono, direccion, foto, huella, username, password, email);
        }
        
        public int AgregarSolicitud(int idUsuario) {
            return base.Channel.AgregarSolicitud(idUsuario);
        }
        
        public System.Threading.Tasks.Task<int> AgregarSolicitudAsync(int idUsuario) {
            return base.Channel.AgregarSolicitudAsync(idUsuario);
        }
        
        public int AgregarSolicitudFecha(int idUsuario, System.DateTime fecha) {
            return base.Channel.AgregarSolicitudFecha(idUsuario, fecha);
        }
        
        public System.Threading.Tasks.Task<int> AgregarSolicitudFechaAsync(int idUsuario, System.DateTime fecha) {
            return base.Channel.AgregarSolicitudFechaAsync(idUsuario, fecha);
        }
        
        public bool AgregarDetalleSolicitud(int idEjemplar, int idSolicitud) {
            return base.Channel.AgregarDetalleSolicitud(idEjemplar, idSolicitud);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarDetalleSolicitudAsync(int idEjemplar, int idSolicitud) {
            return base.Channel.AgregarDetalleSolicitudAsync(idEjemplar, idSolicitud);
        }
        
        public bool AgregarPrestamo(int idEjemplar, string tipoPrestamo, System.DateTime fechaDevolucion, int idSoli, int idUsu) {
            return base.Channel.AgregarPrestamo(idEjemplar, tipoPrestamo, fechaDevolucion, idSoli, idUsu);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarPrestamoAsync(int idEjemplar, string tipoPrestamo, System.DateTime fechaDevolucion, int idSoli, int idUsu) {
            return base.Channel.AgregarPrestamoAsync(idEjemplar, tipoPrestamo, fechaDevolucion, idSoli, idUsu);
        }
        
        public bool DevolucionPrestamo(int idEjemplar) {
            return base.Channel.DevolucionPrestamo(idEjemplar);
        }
        
        public System.Threading.Tasks.Task<bool> DevolucionPrestamoAsync(int idEjemplar) {
            return base.Channel.DevolucionPrestamoAsync(idEjemplar);
        }
        
        public int Doc_EjemplarDisponible(int iddoc) {
            return base.Channel.Doc_EjemplarDisponible(iddoc);
        }
        
        public System.Threading.Tasks.Task<int> Doc_EjemplarDisponibleAsync(int iddoc) {
            return base.Channel.Doc_EjemplarDisponibleAsync(iddoc);
        }
        
        public bool ModificarEjemplar(int idejemplar, int iddocumento, string estado, string ubicacion) {
            return base.Channel.ModificarEjemplar(idejemplar, iddocumento, estado, ubicacion);
        }
        
        public System.Threading.Tasks.Task<bool> ModificarEjemplarAsync(int idejemplar, int iddocumento, string estado, string ubicacion) {
            return base.Channel.ModificarEjemplarAsync(idejemplar, iddocumento, estado, ubicacion);
        }
        
        public bool ModificarEjemplarDisponibilidad(int idejemplar, string disponibilidad) {
            return base.Channel.ModificarEjemplarDisponibilidad(idejemplar, disponibilidad);
        }
        
        public System.Threading.Tasks.Task<bool> ModificarEjemplarDisponibilidadAsync(int idejemplar, string disponibilidad) {
            return base.Channel.ModificarEjemplarDisponibilidadAsync(idejemplar, disponibilidad);
        }
        
        public bool ModificarDocumento(int iddocumento, string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial) {
            return base.Channel.ModificarDocumento(iddocumento, titulo, autor, anio, tipo, categoria, edicion, editorial);
        }
        
        public System.Threading.Tasks.Task<bool> ModificarDocumentoAsync(int iddocumento, string titulo, string autor, string anio, string tipo, string categoria, string edicion, string editorial) {
            return base.Channel.ModificarDocumentoAsync(iddocumento, titulo, autor, anio, tipo, categoria, edicion, editorial);
        }
        
        public bool ModificarUsuario(int id, string rut, string nombres, string apellidos, string telefono, string direccion, bool activo, bool foto, bool huella) {
            return base.Channel.ModificarUsuario(id, rut, nombres, apellidos, telefono, direccion, activo, foto, huella);
        }
        
        public System.Threading.Tasks.Task<bool> ModificarUsuarioAsync(int id, string rut, string nombres, string apellidos, string telefono, string direccion, bool activo, bool foto, bool huella) {
            return base.Channel.ModificarUsuarioAsync(id, rut, nombres, apellidos, telefono, direccion, activo, foto, huella);
        }
        
        public bool EliminarEjemplar(int id) {
            return base.Channel.EliminarEjemplar(id);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarEjemplarAsync(int id) {
            return base.Channel.EliminarEjemplarAsync(id);
        }
        
        public bool EliminarDocumento(int id) {
            return base.Channel.EliminarDocumento(id);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarDocumentoAsync(int id) {
            return base.Channel.EliminarDocumentoAsync(id);
        }
        
        public bool EliminarUsuario(int id) {
            return base.Channel.EliminarUsuario(id);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarUsuarioAsync(int id) {
            return base.Channel.EliminarUsuarioAsync(id);
        }
        
        public bool RechazarSolicitud(int idSol, int idEj) {
            return base.Channel.RechazarSolicitud(idSol, idEj);
        }
        
        public System.Threading.Tasks.Task<bool> RechazarSolicitudAsync(int idSol, int idEj) {
            return base.Channel.RechazarSolicitudAsync(idSol, idEj);
        }
        
        public string GetEmailUsuario(int idUsuario) {
            return base.Channel.GetEmailUsuario(idUsuario);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailUsuarioAsync(int idUsuario) {
            return base.Channel.GetEmailUsuarioAsync(idUsuario);
        }
        
        public string GetRutUsuario(int idUsuario) {
            return base.Channel.GetRutUsuario(idUsuario);
        }
        
        public System.Threading.Tasks.Task<string> GetRutUsuarioAsync(int idUsuario) {
            return base.Channel.GetRutUsuarioAsync(idUsuario);
        }
        
        public bool ExisteRutUsuario(string rut) {
            return base.Channel.ExisteRutUsuario(rut);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteRutUsuarioAsync(string rut) {
            return base.Channel.ExisteRutUsuarioAsync(rut);
        }
        
        public bool ExisteEmailUsuario(string email) {
            return base.Channel.ExisteEmailUsuario(email);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteEmailUsuarioAsync(string email) {
            return base.Channel.ExisteEmailUsuarioAsync(email);
        }
        
        public bool ActivarUsuario(int id, string rut) {
            return base.Channel.ActivarUsuario(id, rut);
        }
        
        public System.Threading.Tasks.Task<bool> ActivarUsuarioAsync(int id, string rut) {
            return base.Channel.ActivarUsuarioAsync(id, rut);
        }
        
        public bool EsActivoUsuario(int id) {
            return base.Channel.EsActivoUsuario(id);
        }
        
        public System.Threading.Tasks.Task<bool> EsActivoUsuarioAsync(int id) {
            return base.Channel.EsActivoUsuarioAsync(id);
        }
        
        public bool AgregarSancion(int idUs, System.DateTime fechaTermino) {
            return base.Channel.AgregarSancion(idUs, fechaTermino);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarSancionAsync(int idUs, System.DateTime fechaTermino) {
            return base.Channel.AgregarSancionAsync(idUs, fechaTermino);
        }
        
        public bool ExisteSancion(int idUs) {
            return base.Channel.ExisteSancion(idUs);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteSancionAsync(int idUs) {
            return base.Channel.ExisteSancionAsync(idUs);
        }
        
        public int DiasAtraso(int idEj) {
            return base.Channel.DiasAtraso(idEj);
        }
        
        public System.Threading.Tasks.Task<int> DiasAtrasoAsync(int idEj) {
            return base.Channel.DiasAtrasoAsync(idEj);
        }
    }
}
